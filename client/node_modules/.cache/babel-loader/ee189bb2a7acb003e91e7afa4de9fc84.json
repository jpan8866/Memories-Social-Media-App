{"ast":null,"code":"var _jsxFileName = \"/Users/muchderek/Desktop/Web Dev/ReactJS/MERN projects/Memories app/client/src/components/Form/Form.js\",\n    _s = $RefreshSig$();\n\nimport useStyles from './styles';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { useState, useEffect } from 'react';\nimport FileBase from 'react-file-base64';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost, updatePost } from '../../actions/posts';\nimport { setPostId } from '../../actions/posts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = () => {\n  _s();\n\n  const [postData, setPostData] = useState({\n    creator: '',\n    title: '',\n    message: '',\n    tags: '',\n    selectedFile: ''\n  });\n  const formStyles = useStyles();\n  const dispatch = useDispatch();\n  const updateId = useSelector(state => state.posts.updateId);\n  const postToUpdate = useSelector(state => updateId ? state.posts.posts.find(post => post._id === updateId) : null); // monitor value of updateId to determine whether we want to display content in form for updating\n\n  useEffect(() => {\n    if (postToUpdate) setPostData(postToUpdate);\n  }, [postToUpdate]);\n\n  const handleSubmit = e => {\n    e.preventDefault(); // if updateId is not null, then this is an update\n\n    if (updateId) dispatch(updatePost(updateId, postData));else dispatch(createPost(postData)); // note the current postData state is the final post to create when user clicks submit\n    // clear the fields of the form after submitting and reset updateId\n\n    clear();\n  }; // put th setPostId in clear() so that we can click clear to cancel edit\n\n\n  const clear = () => {\n    // set updateId back to null after updating\n    dispatch(setPostId(null)); // clear fields\n\n    setPostData({\n      creator: '',\n      title: '',\n      message: '',\n      tags: '',\n      selectedFile: ''\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: formStyles.paper,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${formStyles.form} ${formStyles.root}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [updateId ? `Editing` : `Creating`, \" a Memory\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"creator\",\n        variant: \"outlined\",\n        label: \"Creator\",\n        fullWidth: true\n        /* data from post will be stored in the state object postData, \n        and each object key will be a specific text field */\n        ,\n        value: postData.creator,\n        onChange: e => setPostData({ ...postData,\n          creator: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"title\",\n        variant: \"outlined\",\n        label: \"Title\",\n        fullWidth: true,\n        value: postData.title,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"message\",\n        variant: \"outlined\",\n        label: \"Message\",\n        fullWidth: true,\n        value: postData.message,\n        onChange: e => setPostData({ ...postData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"tags\",\n        variant: \"outlined\",\n        label: \"Tags\",\n        fullWidth: true,\n        value: postData.tags,\n        onChange: e => setPostData({ ...postData,\n          tags: e.target.value.split(',')\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: formStyles.fileInput,\n        children: /*#__PURE__*/_jsxDEV(FileBase, {\n          type: \"file\",\n          multiple: false // destructuring base64\n          ,\n          onDone: ({\n            base64\n          }) => setPostData({ ...postData,\n            selectedFile: base64\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: formStyles.buttonSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Form, \"EwfENFVS0FD8BwZjxdcipPMpJwA=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/muchderek/Desktop/Web Dev/ReactJS/MERN projects/Memories app/client/src/components/Form/Form.js"],"names":["useStyles","TextField","Button","Typography","Paper","useState","useEffect","FileBase","useDispatch","useSelector","createPost","updatePost","setPostId","Form","postData","setPostData","creator","title","message","tags","selectedFile","formStyles","dispatch","updateId","state","posts","postToUpdate","find","post","_id","handleSubmit","e","preventDefault","clear","paper","form","root","target","value","split","fileInput","base64","buttonSubmit"],"mappings":"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","sourcesContent":["import useStyles from './styles';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { useState, useEffect } from 'react';\nimport FileBase from 'react-file-base64';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost, updatePost } from '../../actions/posts';\nimport { setPostId } from '../../actions/posts';\n\nconst Form = () => {\n    const [postData, setPostData] = useState({\n        creator: '',\n        title: '',\n        message: '',\n        tags: '',\n        selectedFile: ''\n    });\n\n    const formStyles = useStyles();\n    const dispatch = useDispatch();\n    const updateId = useSelector(state => state.posts.updateId);\n    const postToUpdate = useSelector(state => updateId ? state.posts.posts.find(post => post._id === updateId) : null);\n\n    // monitor value of updateId to determine whether we want to display content in form for updating\n    useEffect(() => {\n        if(postToUpdate) setPostData(postToUpdate);\n    }, [postToUpdate])\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        // if updateId is not null, then this is an update\n        if(updateId) dispatch(updatePost(updateId, postData));\n        else dispatch(createPost(postData));\n        // note the current postData state is the final post to create when user clicks submit\n\n        // clear the fields of the form after submitting and reset updateId\n        clear();\n    };\n\n    // put th setPostId in clear() so that we can click clear to cancel edit\n    const clear = () => {\n        // set updateId back to null after updating\n        dispatch(setPostId(null));\n        // clear fields\n        setPostData({\n            creator: '',\n            title: '',\n            message: '',\n            tags: '',\n            selectedFile: ''\n        });\n    };\n\n    return (\n        <Paper className={formStyles.paper}>\n            <form autoComplete=\"off\" \n            noValidate \n            className={`${formStyles.form} ${formStyles.root}`} \n            onSubmit={handleSubmit}>\n                <Typography variant=\"h6\">{updateId ? `Editing` : `Creating`} a Memory</Typography>\n                <TextField \n                name=\"creator\" \n                variant=\"outlined\" \n                label=\"Creator\" \n                fullWidth\n                /* data from post will be stored in the state object postData, \n                and each object key will be a specific text field */\n                value={postData.creator}\n                onChange={(e) => setPostData({ ...postData, creator: e.target.value })} />\n                {/* We need to use spread to keep other properties of state postData intact,\n                otherwise the other text fields will disappear and only creator will remain \n                Now repeat below for the other fields */}\n                <TextField name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\n                <TextField name=\"message\" variant=\"outlined\" label=\"Message\" fullWidth value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })} />\n                <TextField name=\"tags\" variant=\"outlined\" label=\"Tags\" fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} />\n                <div className={formStyles.fileInput}>\n                    <FileBase\n                        type=\"file\"\n                        multiple={false}\n                        // destructuring base64\n                        onDone={({base64}) => setPostData({ ...postData, selectedFile: base64})} \n                    />\n                </div>\n                <Button className={formStyles.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\n                <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\n            </form>\n        </Paper>\n    );\n};\n\nexport default Form;"]},"metadata":{},"sourceType":"module"}