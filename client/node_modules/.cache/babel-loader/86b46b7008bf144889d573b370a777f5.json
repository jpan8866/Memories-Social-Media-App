{"ast":null,"code":"var _jsxFileName = \"/Users/muchderek/Desktop/Web Dev/ReactJS/MERN projects/Memories app auth/Memories-Social-Media-App/client/src/components/Form/Form.js\",\n    _s = $RefreshSig$();\n\nimport useStyles from './styles';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { useState, useEffect } from 'react';\nimport FileBase from 'react-file-base64';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost, updatePost } from '../../actions/posts';\nimport { setPostId } from '../../actions/posts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = () => {\n  _s();\n\n  const [postData, setPostData] = useState({\n    title: '',\n    message: '',\n    tags: '',\n    selectedFile: ''\n  });\n  const formStyles = useStyles();\n  const dispatch = useDispatch();\n  const updateId = useSelector(state => state.posts.updateId); // monitor value of updateId to determine whether we want to display content in form for updating\n\n  const postToUpdate = useSelector(state => updateId ? state.posts.posts.find(post => post._id === updateId) : null); // postToUpdate can either be post data, or be null, everytime it changes, we update the postData state (e.g. we want to display the post to update in the form during editing.)\n\n  useEffect(() => {\n    if (postToUpdate) setPostData(postToUpdate);\n  }, [postToUpdate]);\n\n  const handleSubmit = e => {\n    var _user$result, _user$result2;\n\n    e.preventDefault();\n    const user = JSON.parse(localStorage.getItem('profile')); // if updateId is not null, then this is an update\n\n    if (updateId) dispatch(updatePost(updateId, { ...postData,\n      name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n    }));else dispatch(createPost({ ...postData,\n      name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n    })); // note the current postData state is the final post to create when user clicks submit\n    // clear the fields of the form after submitting and reset updateId\n\n    clear();\n  }; // put th setPostId in clear() so that we can click clear to cancel edit\n\n\n  const clear = () => {\n    // set updateId back to null after updating\n    dispatch(setPostId(null)); // clear fields\n\n    setPostData({\n      title: '',\n      message: '',\n      tags: '',\n      selectedFile: ''\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: formStyles.paper,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${formStyles.form} ${formStyles.root}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [updateId ? `Editing` : `Creating`, \" a Memory\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"title\",\n        variant: \"outlined\",\n        label: \"Title\",\n        fullWidth: true,\n        value: postData.title,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"message\",\n        variant: \"outlined\",\n        label: \"Message\",\n        fullWidth: true,\n        value: postData.message,\n        onChange: e => setPostData({ ...postData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"tags\",\n        variant: \"outlined\",\n        label: \"Tags\",\n        fullWidth: true,\n        value: postData.tags,\n        onChange: e => setPostData({ ...postData,\n          tags: e.target.value.split(',')\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: formStyles.fileInput,\n        children: /*#__PURE__*/_jsxDEV(FileBase, {\n          type: \"file\",\n          multiple: false // destructuring base64\n          ,\n          onDone: ({\n            base64\n          }) => setPostData({ ...postData,\n            selectedFile: base64\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: formStyles.buttonSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Form, \"ohSHLJao07/p3aJXw1csj6+ekcE=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/muchderek/Desktop/Web Dev/ReactJS/MERN projects/Memories app auth/Memories-Social-Media-App/client/src/components/Form/Form.js"],"names":["useStyles","TextField","Button","Typography","Paper","useState","useEffect","FileBase","useDispatch","useSelector","createPost","updatePost","setPostId","Form","postData","setPostData","title","message","tags","selectedFile","formStyles","dispatch","updateId","state","posts","postToUpdate","find","post","_id","handleSubmit","e","preventDefault","user","JSON","parse","localStorage","getItem","name","result","clear","paper","form","root","target","value","split","fileInput","base64","buttonSubmit"],"mappings":"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","sourcesContent":["import useStyles from './styles';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { useState, useEffect } from 'react';\nimport FileBase from 'react-file-base64';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost, updatePost } from '../../actions/posts';\nimport { setPostId } from '../../actions/posts';\n\nconst Form = () => {\n    const [postData, setPostData] = useState({\n        title: '',\n        message: '',\n        tags: '',\n        selectedFile: ''\n    });\n\n    const formStyles = useStyles();\n    const dispatch = useDispatch();\n    const updateId = useSelector(state => state.posts.updateId);\n    // monitor value of updateId to determine whether we want to display content in form for updating\n    const postToUpdate = useSelector(state => updateId ? state.posts.posts.find(post => post._id === updateId) : null);\n    // postToUpdate can either be post data, or be null, everytime it changes, we update the postData state (e.g. we want to display the post to update in the form during editing.)\n    useEffect(() => {\n        if(postToUpdate) setPostData(postToUpdate);\n    }, [postToUpdate])\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        const user = JSON.parse(localStorage.getItem('profile'));\n        // if updateId is not null, then this is an update\n        if(updateId) dispatch(updatePost(updateId, { ...postData, name: user?.result?.name }));\n        else dispatch(createPost({ ...postData, name: user?.result?.name }));\n        // note the current postData state is the final post to create when user clicks submit\n\n        // clear the fields of the form after submitting and reset updateId\n        clear();\n    };\n\n    // put th setPostId in clear() so that we can click clear to cancel edit\n    const clear = () => {\n        // set updateId back to null after updating\n        dispatch(setPostId(null));\n        // clear fields\n        setPostData({\n            title: '',\n            message: '',\n            tags: '',\n            selectedFile: ''\n        });\n    };\n\n    return (\n        <Paper className={formStyles.paper}>\n            <form autoComplete=\"off\" \n            noValidate \n            className={`${formStyles.form} ${formStyles.root}`} \n            onSubmit={handleSubmit}>\n                <Typography variant=\"h6\">{updateId ? `Editing` : `Creating`} a Memory</Typography>\n                {/* <TextField   // No longer need creator to be filled in manually as we now have authentication\n                name=\"creator\" \n                variant=\"outlined\" \n                label=\"Creator\" \n                fullWidth\n                value={postData.creator}\n                onChange={(e) => setPostData({ ...postData, creator: e.target.value })} /> */}\n                {/* We need to use spread to keep other properties of state postData intact,\n                otherwise the other text fields will disappear and only creator will remain \n                Now repeat below for the other fields */}\n                {/* data from post will be stored in the state object postData, \n                and each object key will be a specific text field */}\n                <TextField name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\n                <TextField name=\"message\" variant=\"outlined\" label=\"Message\" fullWidth value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })} />\n                <TextField name=\"tags\" variant=\"outlined\" label=\"Tags\" fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} />\n                <div className={formStyles.fileInput}>\n                    <FileBase\n                        type=\"file\"\n                        multiple={false}\n                        // destructuring base64\n                        onDone={({base64}) => setPostData({ ...postData, selectedFile: base64})} \n                    />\n                </div>\n                <Button className={formStyles.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\n                <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\n            </form>\n        </Paper>\n    );\n};\n\nexport default Form;"]},"metadata":{},"sourceType":"module"}