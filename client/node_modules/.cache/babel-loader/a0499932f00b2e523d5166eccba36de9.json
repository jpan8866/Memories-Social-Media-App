{"ast":null,"code":"var _jsxFileName = \"/Users/muchderek/Desktop/Web Dev/ReactJS/MERN projects/Memories app auth/Memories-Social-Media-App/client/src/components/Auth/Auth.js\",\n    _s = $RefreshSig$();\n\nimport useStyles from './styles';\nimport { Avatar, Button, Paper, Grid, Typography, Container } from '@material-ui/core';\nimport { GoogleLogin } from 'react-google-login';\nimport Icon from './Icon';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport { mergeClasses } from '@material-ui/styles';\nimport Input from './Input';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { AUTH } from '../../actions/types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Auth() {\n  _s();\n\n  const authStyles = useStyles();\n  const [isSignup, setIsSignup] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    firstname: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleShowPassword = () => {\n    // toggle state of showPassword\n    setShowPassword(!showPassword);\n  };\n\n  const switchMode = () => {\n    setIsSignup(!isSignup); // reset show password\n\n    handleShowPassword();\n  };\n\n  const handleSubmit = () => {\n    // prevent default (reloading)\n    e.preventDefault();\n  };\n\n  const handleChange = e => {\n    setFormData({ ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const googleSuccess = res => {\n    // the response comes back with user details from google, which we can use to log the user in\n    // use the optional chaining operator to get properties returned by login, return undefined if reference invalid\n    // note that profileObj is itself an object named result\n    const result = res === null || res === void 0 ? void 0 : res.profileObj;\n    const token = res === null || res === void 0 ? void 0 : res.tokenId;\n\n    try {\n      // dispatch the data to redux state manager so that we can obtain the information in other components e.g. Form\n      dispatch({\n        type: AUTH,\n        payload: {\n          result,\n          token\n        }\n      }); // navigate back to home page after successfully logging in\n\n      navigate('/');\n    } catch (error) {\n      console.log(error);\n    }\n\n    console.log(res);\n  };\n\n  const googleFailure = error => {\n    console.log(error);\n    console.log('Google sign in was unsuccessful. Try again.');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      className: authStyles.paper,\n      elevation: 3,\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        className: authStyles.avatar,\n        children: /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: isSignup ? 'Sign Up' : 'Sign In'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: authStyles.form,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [isSignup &&\n          /*#__PURE__*/\n          // ask for first and last name if signing up\n          _jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              name: \"firstName\",\n              label: \"First Name\",\n              handleChange: handleChange,\n              autoFocus: true,\n              half: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              name: \"lastName\",\n              label: \"Last Name\",\n              handleChange: handleChange,\n              half: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"email\",\n            label: \"Email Address\",\n            handleChange: handleChange,\n            type: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"password\",\n            label: \"Password\",\n            handleChange: handleChange,\n            type: showPassword ? \"text\" : \"password\",\n            handleShowPassword: handleShowPassword\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this), isSignup && /*#__PURE__*/_jsxDEV(Input, {\n            name: \"confirmPassword\",\n            label: \"repeat Password\",\n            handleChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 35\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          fullwidth: \"true\",\n          variant: \"contained\",\n          color: \"primary\",\n          className: authStyles.submit,\n          children: isSignup ? \"Sign Up\" : \"Log In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n          clientId: \"204745316346-dqj9d5f1rct95bgchn5i43vvo8gjhlk1.apps.googleusercontent.com\",\n          render: renderProps => /*#__PURE__*/_jsxDEV(Button, {\n            className: authStyles.googleButton,\n            color: \"primary\",\n            fullWidth: true,\n            onClick: renderProps.onClick,\n            disabled: renderProps.disabled,\n            startIcon: /*#__PURE__*/_jsxDEV(Icon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 40\n            }, this),\n            variant: \"contained\",\n            children: \"Google Log in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this),\n          onSuccess: googleSuccess,\n          onFailure: googleFailure,\n          cookiePolicy: \"single_host_origin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justifyContent: \"flex-end\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: switchMode,\n              children: isSignup ? 'Already have an account? Sign In' : 'Don\\'t have an account? Sign Up'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Auth, \"gdX6oj03xmEtZ7HAi+ZrVJqkMkQ=\", false, function () {\n  return [useStyles, useDispatch, useNavigate];\n});\n\n_c = Auth;\nexport default Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["/Users/muchderek/Desktop/Web Dev/ReactJS/MERN projects/Memories app auth/Memories-Social-Media-App/client/src/components/Auth/Auth.js"],"names":["useStyles","Avatar","Button","Paper","Grid","Typography","Container","GoogleLogin","Icon","LockOutlinedIcon","mergeClasses","Input","useState","useDispatch","useNavigate","AUTH","Auth","authStyles","isSignup","setIsSignup","showPassword","setShowPassword","formData","setFormData","firstname","lastName","email","password","confirmPassword","dispatch","navigate","handleShowPassword","switchMode","handleSubmit","e","preventDefault","handleChange","target","name","value","googleSuccess","res","result","profileObj","token","tokenId","type","payload","error","console","log","googleFailure","paper","avatar","form","submit","renderProps","googleButton","onClick","disabled"],"mappings":"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","sourcesContent":["import useStyles from './styles'\nimport { Avatar, Button, Paper, Grid, Typography, Container } from '@material-ui/core';\nimport { GoogleLogin } from 'react-google-login';\nimport Icon from './Icon';\n\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport { mergeClasses } from '@material-ui/styles';\nimport Input from './Input';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { AUTH } from '../../actions/types';\n\nfunction Auth() {\n    const authStyles = useStyles();\n\n    const [isSignup, setIsSignup] = useState(false);\n    const [showPassword, setShowPassword] = useState(false);\n    const [formData, setFormData] = useState({\n        firstname: '',\n        lastName: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n\n    })\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const handleShowPassword = () => {\n        // toggle state of showPassword\n        setShowPassword(!showPassword);\n    };\n\n    const switchMode = () => {\n        setIsSignup(!isSignup);\n        // reset show password\n        handleShowPassword();\n    };\n\n    const handleSubmit = () => {\n        // prevent default (reloading)\n        e.preventDefault();\n\n    };\n\n    const handleChange = (e) => {\n        setFormData({ ...formData, [e.target.name]: e.target.value })\n    };\n\n    const googleSuccess = (res) => {\n        // the response comes back with user details from google, which we can use to log the user in\n        // use the optional chaining operator to get properties returned by login, return undefined if reference invalid\n        // note that profileObj is itself an object named result\n        const result = res?.profileObj;\n        const token = res?.tokenId;\n\n        try {\n            // dispatch the data to redux state manager so that we can obtain the information in other components e.g. Form\n            dispatch({ type: AUTH, payload: { result, token } });\n            // navigate back to home page after successfully logging in\n            navigate('/');\n        } catch (error) {\n            console.log(error);\n        }\n        console.log(res);\n    };\n\n    const googleFailure = (error) => {\n        console.log(error)\n        console.log('Google sign in was unsuccessful. Try again.');\n    };\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <Paper className={authStyles.paper} elevation={3}>\n                <Avatar className={authStyles.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n            <Typography variant=\"h5\">{isSignup ? 'Sign Up' : 'Sign In'}</Typography>\n            <form className={authStyles.form} onSubmit={handleSubmit}>\n                <Grid container spacing={2}>\n                    { isSignup && ( // ask for first and last name if signing up\n                        <>\n                            <Input name=\"firstName\" label=\"First Name\" handleChange={handleChange} autoFocus half />\n                            <Input name=\"lastName\" label=\"Last Name\" handleChange={handleChange} half />\n                        </>\n                    )}\n                    <Input name=\"email\" label=\"Email Address\" handleChange={handleChange} type=\"email\" />\n                    <Input name=\"password\" label=\"Password\" handleChange={handleChange} type={showPassword ? \"text\" : \"password\"} handleShowPassword={handleShowPassword} />\n                    {/* If this is signing up, then we need a confirm password field */}\n                    { isSignup && <Input name=\"confirmPassword\" label=\"repeat Password\" handleChange={handleChange} />}\n                </Grid>\n                <Button type=\"submit\" fullwidth=\"true\" variant=\"contained\" color=\"primary\" className={authStyles.submit}>\n                    {isSignup ? \"Sign Up\" : \"Log In\"}\n                </Button>\n                <GoogleLogin\n                    clientId=\"204745316346-dqj9d5f1rct95bgchn5i43vvo8gjhlk1.apps.googleusercontent.com\"\n                    render={(renderProps) => (\n                        <Button \n                            className={authStyles.googleButton}\n                            color=\"primary\"\n                            fullWidth\n                            onClick={renderProps.onClick}\n                            disabled={renderProps.disabled}\n                            startIcon={<Icon />}\n                            variant=\"contained\"\n                        >\n                        Google Log in\n                        </Button>\n                    )}\n                    onSuccess={googleSuccess}\n                    onFailure={googleFailure}\n                    cookiePolicy=\"single_host_origin\"\n                />\n                <Grid container justifyContent=\"flex-end\">\n                    <Grid item>\n                        <Button onClick={switchMode}>\n                            {isSignup ? 'Already have an account? Sign In' : 'Don\\'t have an account? Sign Up'}\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form>\n            </Paper>\n        </Container>\n    )\n}\n\nexport default Auth\n"]},"metadata":{},"sourceType":"module"}