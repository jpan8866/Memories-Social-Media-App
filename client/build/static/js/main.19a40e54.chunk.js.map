{"version":3,"sources":["actions/types.js","reducers/postsReducer.js","reducers/authReducer.js","reducers/index.js","store.js","components/Navbar/styles.js","images/memories.png","components/Navbar/Navbar.js","components/Posts/Post/styles.js","api/index.js","actions/posts.js","components/Posts/Post/Likes.js","components/Posts/Post/Post.js","components/Posts/styles.js","components/Posts/Posts.js","components/Form/styles.js","components/Form/Form.js","styles.js","components/Home/Home.js","components/Auth/styles.js","components/Auth/Icon.js","components/Auth/Input.js","components/Auth/Auth.js","actions/auth.js","App.js","index.js"],"names":["FETCH_ALL","CREATE","UPDATE","SET_ID","DELETE","LIKE_POST","AUTH","LOGOUT","initialState","posts","updateId","postsReducer","state","action","type","payload","map","post","_id","filter","authData","authReducer","localStorage","setItem","JSON","stringify","clear","combineReducers","auth","store","createStore","rootReducer","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","makeStyles","theme","appBar","borderRadius","margin","display","flexDirection","justifyContent","alignItems","padding","heading","color","textDecoration","image","marginLeft","toolbar","width","profile","userName","brandContainer","purple","palette","getContrastText","deepPurple","backgroundColor","Navbar","styleClasses","useStyles","useState","parse","getItem","user","setUser","navigate","useNavigate","dispatch","useDispatch","location","useLocation","logout","useCallback","useEffect","token","decode","exp","Date","getTime","console","log","AppBar","className","position","Typography","component","Link","to","variant","align","src","memories","alt","height","Toolbar","Avatar","result","name","imageUrl","charAt","Button","onClick","media","paddingTop","backgroundBlendMode","border","fullHeightCard","card","borderColor","overlay","top","left","overlay2","right","grid","details","title","cardActions","API","axios","create","baseURL","interceptors","request","use","req","headers","Authorization","updatePost","id","updatedPost","patch","deletePost","delete","likePost","setPostId","actions","Likes","likes","length","find","like","googleId","fontSize","Post","postStyles","Card","CardMedia","selectedFile","moment","createdAt","fromNow","creator","style","size","tags","tag","gutterBottom","CardContent","message","CardActions","disabled","a","api","res","data","mainContainer","smMargin","spacing","actionDiv","textAlign","Posts","postsStyles","useSelector","get","Grid","container","item","xs","sm","CircularProgress","root","paper","form","flexWrap","fileInput","buttonSubmit","marginBottom","Form","postData","setPostData","formStyles","postToUpdate","Paper","autoComplete","noValidate","onSubmit","e","preventDefault","newPost","createPost","TextField","label","fullWidth","value","onChange","target","split","multiple","onDone","base64","breakpoints","down","Home","Grow","in","Container","marginTop","avatar","secondary","main","submit","googleButton","icon","viewBox","fill","d","Input","handleChange","half","autoFocus","handleShowPassword","required","InputProps","endAdornment","InputAdornment","IconButton","Auth","authStyles","isSignup","setIsSignup","showPassword","setShowPassword","firstName","lastName","email","password","confirmPassword","formData","setFormData","maxWidth","elevation","signUp","signIn","fullwidth","clientId","render","renderProps","startIcon","Icon","onSuccess","profileObj","tokenId","error","onFailure","cookiePolicy","App","maxwidth","path","exact","element","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.19a40e54.chunk.js","sourcesContent":["export const FETCH_ALL = 'FETCH_ALL';\nexport const CREATE = 'CREATE';\nexport const UPDATE = 'UPDATE';\nexport const SET_ID = 'SET_ID';\nexport const DELETE = 'DELETE';\nexport const LIKE_POST = 'LIKE_POST';\n\n// for auth use\nexport const AUTH = 'AUTH';\nexport const LOGOUT = 'LOGOUT';","import { FETCH_ALL, CREATE, UPDATE, SET_ID, DELETE, LIKE_POST } from \"../actions/types\";\n\nconst initialState = {\n    posts: [],\n    updateId: null\n};\n\nconst postsReducer = (state=initialState, action) => {\n    switch(action.type) {\n        case FETCH_ALL:\n            return {\n                ...state,\n                posts: action.payload\n            };\n        case CREATE:\n            return {\n                ...state,\n                posts: [action.payload, ...state.posts]\n            };\n        case UPDATE:\n            // We want to replace the post with matching id with the newly updated post\n            return {\n                ...state,\n                posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n            };\n        case SET_ID:\n            return {\n                ...state,\n                updateId: action.payload\n            };\n        case DELETE:\n            return {\n                ...state,\n                posts: state.posts.filter(post => post._id !== action.payload)\n            };\n        case LIKE_POST:\n            // note that the payload receive is the post with the updated number of likes.\n            // replace it directly using map\n            return {\n                ...state,\n                posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n            }\n        default: \n            return state;\n    };\n};\n\nexport default postsReducer;","import { AUTH, LOGOUT } from '../actions/types';\n\nconst initialState = {\n    authData: null\n}\n// get user data\nconst authReducer = (state=initialState, action) => {\n    switch(action.type) {\n        case AUTH:\n            // Need to use JSON.stringify because objects are stored as addresses in localStorage. \n            // we can extract this info in Navbar using JSON.parse\n            localStorage.setItem('profile', JSON.stringify({ ...action?.payload }));\n\n            return {\n                ...state,\n                authData: action?.payload\n            };\n        case LOGOUT:\n            // clear the login status from UI\n            localStorage.clear();\n            // erase authData when logging out\n            return {\n                ...state,\n                authData: null\n            };\n        default:\n            return state;\n    }\n}\n\nexport default authReducer;","// combine reducers here\nimport { combineReducers } from 'redux';\nimport postsReducer from './postsReducer';\nimport authReducer from './authReducer';\n\nexport default combineReducers({\n    posts: postsReducer,\n    auth: authReducer\n})","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './reducers'; // grabs index file \n\nconst initialState = {};\n\nconst store = createStore(rootReducer, initialState, compose(applyMiddleware(thunk), \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\nexport default store;","import { makeStyles } from '@material-ui/core/styles';\nimport { deepPurple } from '@material-ui/core/colors';\n\nexport default makeStyles((theme) => ({\n  appBar: {\n    borderRadius: 15,\n    margin: '30px 0',\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: '10px 50px',\n  },\n  heading: {\n    color: 'rgba(0,183,255, 1)',\n    textDecoration: 'none',\n  },\n  image: {\n    marginLeft: '15px',\n  },\n  toolbar: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    width: '400px',\n  },\n  profile: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    width: '400px',\n  },\n  userName: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  brandContainer: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  purple: {\n    color: theme.palette.getContrastText(deepPurple[500]),\n    backgroundColor: deepPurple[500],\n  },\n}));","export default __webpack_public_path__ + \"static/media/memories.9cfa8a46.png\";","import { AppBar, Typography, Button, Toolbar, Avatar } from '@material-ui/core';\nimport useStyles from './styles';\nimport memories from '../../images/memories.png';\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\nimport { useState, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport decode from 'jwt-decode';\nimport { LOGOUT } from '../../actions/types';\n\nfunction Navbar() {\n    const styleClasses = useStyles();\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')));\n    //const user = JSON.parse(localStorage.getItem('profile'));\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n    // use the current location to perform side effect (whenever it changes, set user e.g. when logging in, obtaining user info from google OAuth)\n    const location = useLocation();\n\n    const logout = useCallback(() => {\n        dispatch({ type: LOGOUT });\n        navigate('/auth');\n        setUser(null);\n    }, [dispatch, navigate]);\n\n    useEffect(() => {\n        // log user out if token has expired\n        const token = user?.token;\n        if(token) {\n            const decodedToken = decode(token);\n            if(decodedToken.exp * 1000 < new Date().getTime()) {\n                logout();\n                console.log('logged out');\n            }\n        }\n\n        // so that the login information changes reflect without having to refresh page\n        setUser(JSON.parse(localStorage.getItem('profile')));\n    }, [location, user?.token, logout]);\n\n    return (\n        <AppBar className={styleClasses.appBar} position=\"static\" color=\"inherit\">\n            <div className={styleClasses.brandContainer}>\n                {/* gives a nice font to textual elements. Note \"/\" is path to home, clicking on Memories title brings back home, set up in routes */}\n                <Typography component={Link} to=\"/\" className={styleClasses.heading} variant=\"h2\" align=\"center\">Memories</Typography>\n                <img className={styleClasses.image} src={memories} alt=\"memories\" height=\"60\"/>\n            </div> \n            {/* In the App bar, if logged in, we want to show user avatar, username and logout button */}\n            <Toolbar className={styleClasses.toolbar}>\n                {user ? (\n                    <div className={styleClasses.profile}>\n                        <Avatar className={styleClasses.purple} alt={user.result.name} src={user.result.imageUrl}>\n                            {user.result.name.charAt(0) /* show first letter if no pic */}  \n                        </Avatar>\n                        <Typography className={styleClasses.userName} variant=\"h6\">{user.result.name}</Typography>\n                        <Button variant=\"contained\" className={styleClasses.logout} color=\"secondary\" onClick={logout}>Logout</Button>\n                    </div>\n                ) : ( // if not logged in, simply show button to log in\n                    <Button component={Link} to=\"/auth\" variant=\"contained\" color=\"primary\">Sign In</Button>\n                )}\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default Navbar\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles({\n  media: {\n    height: 0,\n    paddingTop: '56.25%',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    backgroundBlendMode: 'darken',\n  },\n  border: {\n    border: 'solid',\n  },\n  fullHeightCard: {\n    height: '100%',\n  },\n  card: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    borderRadius: '15px',\n    height: '100%',\n    position: 'relative',\n    borderColor: 'red'\n  },\n  overlay: {\n    position: 'absolute',\n    top: '20px',\n    left: '20px',\n    color: 'white',\n  },\n  overlay2: {\n    position: 'absolute',\n    top: '20px',\n    right: '20px',\n    color: 'white',\n  },\n  grid: {\n    display: 'flex',\n  },\n  details: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    margin: '20px',\n  },\n  title: {\n    padding: '0 16px',\n  },\n  cardActions: {\n    padding: '0 16px 8px 16px',\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n});","// use axios to make api calls (can also use fetch)\nimport axios from 'axios';\n\n//const url = '/api/posts'; // recall that this url goes to our posts routes in backend\n\n// use baseURL instead, change axios. to API. below\nconst API = axios.create({ baseURL: \"http://127.0.0.1:5000/api\" });\n\n// intercept all below requests and populate req with token if logged in\nAPI.interceptors.request.use((req) => {\n    if(localStorage.getItem('profile')) {\n        req.headers.Authorization = `Bearer ${JSON.parse(localStorage.getItem('profile')).token}`;\n    }\n    \n    return req;\n})\n\n// used with get, this returns all posts\nexport const fetchPosts = () => API.get('/posts');\nexport const createPost = (newPost) => API.post('/posts', newPost);\nexport const updatePost = (id, updatedPost) => API.patch(`/posts/${id}`, updatedPost);\nexport const deletePost = (id) => API.delete(`/posts/${id}`);\nexport const likePost = (id) => API.patch(`/posts/${id}/likePost`);\n// Note that Axios automatically serializes object to JSON\n\nexport const signIn = (formData) => API.post('/user/signin', formData);\nexport const signUp = (formData) => API.post('/user/signup', formData); ","import * as api from '../api';\n// use api index file to perform all requests e.g. api.fetchPosts(). Ensures cleanliness\nimport * as actions from './types';\n\nexport const getPosts = () => async (dispatch) => {\n    try {\n        const res = await api.fetchPosts(); // recall we're using axios\n        dispatch({\n            type: actions.FETCH_ALL,\n            payload: res.data\n        });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const createPost = (post) => async (dispatch) => {\n    try {\n        const res = await api.createPost(post);\n        // Note that Axios automatically serializes object to JSON\n        dispatch({\n            type: actions.CREATE,\n            payload: res.data\n        });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const updatePost = (id, post) => async (dispatch) => {\n    try {\n        // send update request to backend and get newly updated post as response\n        const res = await api.updatePost(id, post);\n        const updatedPost = res.data;\n\n        dispatch({\n            type: actions.UPDATE,\n            payload: updatedPost\n        })\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const setPostId = (id) => {\n    return {\n        type: actions.SET_ID,\n        payload: id\n    };\n};\n\nexport const deletePost = (id) => async (dispatch) => {\n    try {\n        // note we are not interested in the response, since we are deleting.\n        // could return the post deleted for debugging purposes if needed.\n        // send request to backend \n        await api.deletePost(id);\n        // update front-end\n        dispatch({\n            type: actions.DELETE,\n            payload: id\n        }); \n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const likePost = (id) => async (dispatch) => {\n    try {\n        // send request to back-end to update like count\n        const res = await api.likePost(id);\n        // update front-end\n        dispatch({\n            type: actions.LIKE_POST,\n            payload: res.data\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}","import ThumbUpAlt from '@material-ui/icons/ThumbUpAlt'; \nimport ThumbUpAltOutlined from '@material-ui/icons/ThumbUpAltOutlined';\n\nconst Likes = ({post, user}) => {\n    if(post.likes.length > 0) {\n        return post.likes.find((like) => like === (user?.result?.googleId || user?.result?._id)) ?\n        (\n            <><ThumbUpAlt fontSize=\"small\" />&nbsp;{post.likes.length > 2 ? `You and ${post.likes.length -1} others` : `${post.likes.length} like${post.likes.length > 1 ? 's' : ''}` }</>\n\n        ) : (\n            <><ThumbUpAltOutlined fontSize=\"small\" />&nbsp;{post.likes.length} {post.likes.length === 1 ? 'Like' : 'Likes'}</>\n        );\n    }\n    // no likes yet\n    return (<>\n                <ThumbUpAltOutlined fontSize=\"small\" />&nbsp;Like\n            </>)\n};\n\nexport default Likes;","import useStyles from './styles';\nimport { Card, CardActions, CardContent, CardMedia, Button, Typography } from '@material-ui/core'; \nimport DeleteIcon from '@material-ui/icons/Delete';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport moment from 'moment';\nimport { useDispatch } from 'react-redux';\nimport { setPostId, deletePost, likePost } from '../../../actions/posts';\nimport Likes from './Likes';\n\nconst Post = ({ post }) => {\n    const postStyles = useStyles();\n    const dispatch = useDispatch();\n    const user = JSON.parse(localStorage.getItem('profile'));\n\n    return (\n        <Card className={postStyles.card}>\n            <CardMedia className={postStyles.media} image={post.selectedFile} title={post.title} />\n            <div className={postStyles.overlay}>\n                <Typography variant=\"h6\">{post.name}</Typography>\n                <Typography variant=\"body2\">{moment(post.createdAt).fromNow()}</Typography>\n            </div>\n            <div className={postStyles.overlay2}>\n                {/* Do not show button if current user is not creator of post */}\n                {(user?.result?.googleId === post?.creator || user?.result?._id === post?.creator) &&\n                (<Button style={{color: 'white'}} size=\"small\" onClick={() => dispatch(setPostId(post._id))}>\n                     <MoreHorizIcon fontSize=\"medium\" />\n                </Button>)\n                }\n            </div>\n            <div className={postStyles.details}>\n                <Typography variant=\"body2\" color=\"textSecondary\">{post.tags.map((tag) => `${tag}`)}</Typography>\n            </div>\n            <Typography className={postStyles.title} variant=\"h5\" gutterBottom>{post.title}</Typography>\n            <CardContent>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{post.message}</Typography>\n            </CardContent>\n            <CardActions className={postStyles.cardActions}>\n                <Button size=\"small\" color=\"primary\" disabled={!user} onClick={() => dispatch(likePost(post._id))}>\n                    <Likes post={post} user={user}/>\n                </Button>\n                {(user?.result?.googleId === post?.creator || user?.result?._id === post?.creator) && (\n                <Button size=\"small\" color=\"primary\" onClick={() => dispatch(deletePost(post._id))}>\n                    <DeleteIcon fontSize=\"small\" />\n                    &nbsp; Delete \n                </Button>\n                )}    \n            </CardActions>\n        </Card>\n    );\n};\n\nexport default Post;","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  mainContainer: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: 'center',\n  },\n}));","import Post from \"./Post/Post\";\nimport useStyles from './styles';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Grid, CircularProgress } from '@material-ui/core';\nimport { useEffect } from 'react';\nimport { getPosts } from \"../../actions/posts\";\n\nconst Posts = () => {\n    const postsStyles = useStyles();\n    const dispatch = useDispatch();\n    const updateId = useSelector(state => state.posts.updateId);\n\n    // Include updateId in bracket so that everytime its value changes, the posts are fetched\n    // required when we make updates to a post. \n    useEffect(() => {\n        dispatch(getPosts());\n    }, [dispatch, updateId]);\n\n    const posts = useSelector(state => state.posts.posts) \n    // note 1st posts is the postsReducer, 2nd is the posts element of that state object (see postsReducer)\n    //console.log(posts);\n    return (\n        // if no posts or if still loading (since async), display spinning circle\n        // else display posts\n        !posts.length ? <CircularProgress /> : (\n            <Grid className={postsStyles.container} container alignItems=\"stretch\" spacing={3}>\n                {posts.map((post) => (\n                    <Grid key={post._id} item xs={12} sm={6}>\n                        {/* send the post to the Post component as a prop */}\n                        <Post post={post} />\n                    </Grid>\n                ))}\n            </Grid>\n        )\n    );\n};\n\nexport default Posts;","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n    },\n  },\n  paper: {\n    padding: theme.spacing(2),\n  },\n  form: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n  },\n  fileInput: {\n    width: '97%',\n    margin: '10px 0',\n  },\n  buttonSubmit: {\n    marginBottom: 10,\n  },\n}));","import useStyles from './styles';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { useState, useEffect } from 'react';\nimport FileBase from 'react-file-base64';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost, updatePost } from '../../actions/posts';\nimport { setPostId } from '../../actions/posts';\n\nconst Form = () => {\n    const [postData, setPostData] = useState({\n        title: '',\n        message: '',\n        tags: '',\n        selectedFile: ''\n    });\n\n    const formStyles = useStyles();\n    const dispatch = useDispatch();\n    const user = JSON.parse(localStorage.getItem('profile'));\n    const updateId = useSelector(state => state.posts.updateId);\n    // monitor value of updateId to determine whether we want to display content in form for updating\n    const postToUpdate = useSelector(state => updateId ? state.posts.posts.find(post => post._id === updateId) : null);\n    // postToUpdate can either be post data, or be null, everytime it changes, we update the postData state (e.g. we want to display the post to update in the form during editing.)\n    useEffect(() => {\n        if(postToUpdate) setPostData(postToUpdate);\n    }, [postToUpdate])\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // if updateId is not null, then this is an update\n        if(updateId) dispatch(updatePost(updateId, { ...postData, name: user?.result?.name }));\n        else dispatch(createPost({ ...postData, name: user?.result?.name }));\n        // note the current postData state is the final post to create when user clicks submit\n\n        // clear the fields of the form after submitting and reset updateId\n        clear();\n    };\n\n    // put th setPostId in clear() so that we can click clear to cancel edit\n    const clear = () => {\n        // set updateId back to null after updating\n        dispatch(setPostId(null));\n        // clear fields\n        setPostData({\n            title: '',\n            message: '',\n            tags: '',\n            selectedFile: ''\n        });\n    };\n\n    // return w paper to hide form if not logged in\n    if(!user) {\n        return (\n            <Paper className={formStyles.paper}>\n                <Typography variant=\"h6\" align=\"center\">\n                    Please sign in to post and interact with memory cards.\n                </Typography>\n            </Paper>\n        )\n    } \n\n    return (\n        <Paper className={formStyles.paper}>\n            <form autoComplete=\"off\" \n            noValidate \n            className={`${formStyles.form} ${formStyles.root}`} \n            onSubmit={handleSubmit}>\n                <Typography variant=\"h6\">{updateId ? `Editing` : `Creating`} a Memory</Typography>\n                {/* <TextField   // No longer need creator to be filled in manually as we now have authentication\n                name=\"creator\" \n                variant=\"outlined\" \n                label=\"Creator\" \n                fullWidth\n                value={postData.creator}\n                onChange={(e) => setPostData({ ...postData, creator: e.target.value })} /> */}\n                {/* We need to use spread to keep other properties of state postData intact,\n                otherwise the other text fields will disappear and only creator will remain \n                Now repeat below for the other fields */}\n                {/* data from post will be stored in the state object postData, \n                and each object key will be a specific text field */}\n                <TextField name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\n                <TextField name=\"message\" variant=\"outlined\" label=\"Message\" fullWidth value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })} />\n                <TextField name=\"tags\" variant=\"outlined\" label=\"Tags\" fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} />\n                <div className={formStyles.fileInput}>\n                    <FileBase\n                        type=\"file\"\n                        multiple={false}\n                        // destructuring base64\n                        onDone={({base64}) => setPostData({ ...postData, selectedFile: base64})} \n                    />\n                </div>\n                <Button className={formStyles.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\n                <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\n            </form>\n        </Paper>\n    );\n};\n\nexport default Form;","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n    // note this is an object\n    appBar: {\n        borderRadius: 15,\n        margin: '30px 0',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n      },\n      heading: {\n        color: 'rgba(0,183,255, 1)',\n      },\n      image: {\n        marginLeft: '15px',\n      },\n      [theme.breakpoints.down('sm')]: {\n        mainContainer: {\n          flexDirection:\"column-reverse\" \n        }\n      }\n}));","import { Container, Grow, Grid } from '@material-ui/core';\nimport Posts from '../Posts/Posts';\nimport Form from '../Form/Form';\nimport useStyles from '../../styles';\n\nfunction Home() {\n     // Note that useStyles() returns an object containing 3 style items for appBar, heading and image\n    // use them for below respective elements:\n    const styleClasses = useStyles();\n    \n    return (\n        /* use Grow for animation */\n        <Grow in>\n            <Container>\n                <Grid className={styleClasses.mainContainer} container justifyContent=\"space-between\" alignItems=\"stretch\" spacing={3}>\n                    {/* full screen for xtra small screen, and 7 out of 12 spaces on small/medium devices */}\n                    <Grid item xs={12} sm={7}>\n                        <Posts />\n                    </Grid>\n                    <Grid item xs={12} sm={4}>\n                        <Form />\n                    </Grid>\n                </Grid>\n            </Container>\n        </Grow>\n    )\n}\n\nexport default Home\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n    },\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  googleButton: {\n    marginBottom: theme.spacing(2),\n  },\n}));","import React from 'react';\n\nconst icon = () => (\n  <svg style={{ width: '20px', height: '20px' }} viewBox=\"0 0 24 24\">\n    <path\n      fill=\"currentColor\"\n      d=\"M21.35,11.1H12.18V13.83H18.69C18.36,17.64 15.19,19.27 12.19,19.27C8.36,19.27 5,16.25 5,12C5,7.9 8.2,4.73 12.2,4.73C15.29,4.73 17.1,6.7 17.1,6.7L19,4.72C19,4.72 16.56,2 12.1,2C6.42,2 2.03,6.8 2.03,12C2.03,17.05 6.16,22 12.25,22C17.6,22 21.5,18.33 21.5,12.91C21.5,11.76 21.35,11.1 21.35,11.1V11.1Z\"\n    />\n  </svg>\n);\n\nexport default icon;","import { TextField, Grid, InputAdornment, IconButton } from '@material-ui/core';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\n\nfunction Input({ name, handleChange, label, half, autoFocus, type, handleShowPassword }) {\n    return (\n        <Grid item xs={12} sm={half ? 6 : 12}>\n            <TextField\n                name={name}\n                onChange={handleChange}\n                variant=\"outlined\"\n                required\n                fullWidth\n                label={label}\n                autoFocus={autoFocus}\n                type={type}\n                InputProps={name === 'password' ? {\n                    endAdornment: (\n                        <InputAdornment position='end'>\n                            <IconButton onClick={handleShowPassword}>\n                                {type === 'password' ? <Visibility /> : <VisibilityOff />}\n                            </IconButton>\n                        </InputAdornment>\n                    )\n                } : null}\n            />\n        </Grid>\n    )\n}\n\nexport default Input\n","import useStyles from './styles'\nimport { Avatar, Button, Paper, Grid, Typography, Container } from '@material-ui/core';\nimport { GoogleLogin } from 'react-google-login';\nimport Icon from './Icon';\n\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Input from './Input';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { signUp, signIn } from '../../actions/auth'\nimport { AUTH } from '../../actions/types';\n\nfunction Auth() {\n    const authStyles = useStyles();\n\n    const [isSignup, setIsSignup] = useState(false);\n    const [showPassword, setShowPassword] = useState(false);\n    const [formData, setFormData] = useState({\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n\n    })\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const handleShowPassword = () => {\n        // toggle state of showPassword\n        setShowPassword(!showPassword);\n    };\n\n    const switchMode = () => {\n        setIsSignup(!isSignup);\n        // reset show password\n        handleShowPassword();\n    };\n\n    const handleSubmit = (e) => {\n        // prevent default (reloading)\n        e.preventDefault();\n        //console.log(formData);\n        \n        // Dispatch an action to update database depending on cases below:\n        // Case 1: new user signing up\n        if(isSignup) {\n            // also pass navigate so we can navigate the page after action completed\n            dispatch(signUp(formData, navigate));\n        } else {\n            // Case 2: existing user logging in\n            dispatch(signIn(formData, navigate));\n        }\n    };\n\n    // Works for all input fields\n    const handleChange = (e) => {\n        setFormData({ ...formData, [e.target.name]: e.target.value });\n    };\n\n    const googleSuccess = (res) => {\n        // the response comes back with user details from google, which we can use to log the user in\n        // use the optional chaining operator to get properties returned by login, return undefined if reference invalid\n        // note that profileObj is itself an object named result\n        const result = res?.profileObj;\n        const token = res?.tokenId;\n\n        try {\n            // dispatch the data to redux state manager so that we can obtain the information in other components e.g. Form\n            dispatch({ type: AUTH, payload: { result, token } });\n            // navigate back to home page after successfully logging in\n            navigate('/');\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const googleFailure = (error) => {\n        console.log(error)\n        console.log('Google sign in was unsuccessful. Try again.');\n    };\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <Paper className={authStyles.paper} elevation={3}>\n                <Avatar className={authStyles.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n            <Typography variant=\"h5\">{isSignup ? 'Sign Up' : 'Sign In'}</Typography>\n            <form className={authStyles.form} onSubmit={handleSubmit}>\n                <Grid container spacing={2}>\n                    { isSignup && ( // ask for first and last name if signing up\n                        <>\n                            <Input name=\"firstName\" label=\"First Name\" handleChange={handleChange} autoFocus half />\n                            <Input name=\"lastName\" label=\"Last Name\" handleChange={handleChange} half />\n                        </>\n                    )}\n                    <Input name=\"email\" label=\"Email Address\" handleChange={handleChange} type=\"email\" />\n                    <Input name=\"password\" label=\"Password\" handleChange={handleChange} type={showPassword ? \"text\" : \"password\"} handleShowPassword={handleShowPassword} />\n                    {/* If this is signing up, then we need a confirm password field */}\n                    { isSignup && <Input name=\"confirmPassword\" label=\"repeat Password\" handleChange={handleChange} />}\n                </Grid>\n                <Button type=\"submit\" fullwidth=\"true\" variant=\"contained\" color=\"primary\" className={authStyles.submit}>\n                    {isSignup ? \"Sign Up\" : \"Log In\"}\n                </Button>\n                <GoogleLogin\n                    clientId=\"204745316346-dqj9d5f1rct95bgchn5i43vvo8gjhlk1.apps.googleusercontent.com\"\n                    render={(renderProps) => (\n                        <Button \n                            className={authStyles.googleButton}\n                            color=\"primary\"\n                            fullWidth\n                            onClick={renderProps.onClick}\n                            disabled={renderProps.disabled}\n                            startIcon={<Icon />}\n                            variant=\"contained\"\n                        >\n                        Google Log in\n                        </Button>\n                    )}\n                    onSuccess={googleSuccess}\n                    onFailure={googleFailure}\n                    cookiePolicy=\"single_host_origin\"\n                />\n                <Grid container justifyContent=\"flex-end\">\n                    <Grid item>\n                        <Button onClick={switchMode}>\n                            {isSignup ? 'Already have an account? Sign In' : 'Don\\'t have an account? Sign Up'}\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form>\n            </Paper>\n        </Container>\n    )\n}\n\nexport default Auth\n","import { AUTH } from './types';\nimport * as api from '../api/index';\n\nexport const signIn = (postData, navigate) => async (dispatch) => {\n\n    try {\n        // send data to the back-end/database so that it signs in the user\n        // recall with axios we can get data directly, Axios automatically serializes object to JSON\n        // and axios automatically parses JSON response to js object\n        const { data } = await api.signIn(postData); \n\n        dispatch({ \n            type: AUTH, \n            payload: data \n        });\n\n        // navigate to home once signed in\n        navigate('/');\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const signUp = (postData, navigate) => async (dispatch) => {\n    // send data to back-end/data to sign up the user\n    try {\n        const { data } = await api.signUp(postData); \n        \n        dispatch({ \n            type: AUTH, \n            payload: data \n        });\n        \n        navigate('/');\n    } catch (error) {\n        console.log(error);\n    }\n}","import { Container } from '@material-ui/core';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\nimport Navbar from './components/Navbar/Navbar';\nimport Home from './components/Home/Home';\nimport Auth from './components/Auth/Auth';\n\nconst App = () => { //functional component\n\n    return (\n        <BrowserRouter>\n            {/* use container to center everything */}\n            <Container maxwidth=\"lg\">\n                <Navbar />\n                <Routes>\n                    <Route path=\"/\" exact element={<Home />} />\n                    <Route path=\"/auth\" exact element={<Auth />} />\n                </Routes>\n            </Container>   \n        </BrowserRouter>\n           \n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}